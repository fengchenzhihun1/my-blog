(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{1103:function(t,v,_){t.exports=_.p+"assets/img/simpleFactory.ae7f4cdc.png"},1104:function(t,v,_){t.exports=_.p+"assets/img/simpleFactorySeq.0689aeec.png"},1105:function(t,v,_){t.exports=_.p+"assets/img/factoryMethodClass.36d79004.png"},1106:function(t,v,_){t.exports=_.p+"assets/img/methodFactorySeq.6ef47a69.png"},1107:function(t,v,_){t.exports=_.p+"assets/img/methodDFactoryLogClasspnc.847e89e4.png"},1108:function(t,v,_){t.exports=_.p+"assets/img/factoryMethodClasslogseq.84f1a26e.png"},1109:function(t,v,_){t.exports=_.p+"assets/img/abstractFactoryClass.ce209909.png"},1110:function(t,v,_){t.exports=_.p+"assets/img/abstractFactorySequ.9d85f8cc.png"},1151:function(t,v,_){"use strict";_.r(v);var s=_(0),a=Object(s.a)({},(function(){var t=this,v=t.$createElement,s=t._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("创建型模式(Creational Pattern)对类的"),s("strong",[t._v("实例化过程")]),t._v("进行了"),s("strong",[t._v("抽象")]),t._v("，能够将软件模块中对象的"),s("strong",[t._v("创建和对象的使用")]),t._v("分离。为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合"),s("strong",[t._v("单一职责原则")]),t._v("。")]),t._v(" "),s("p",[t._v("创建型模式在"),s("strong",[t._v("创建什么")]),t._v("(What)，"),s("strong",[t._v("由谁创建")]),t._v("(Who)，"),s("strong",[t._v("何时创建")]),t._v("(When)等方面都为软件设计者提供了尽可能大的灵活性。创建型模式"),s("strong",[t._v("隐藏")]),t._v("了类的实例的创建"),s("strong",[t._v("细节")]),t._v("，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。")]),t._v(" "),s("p",[t._v("创建型包含的设计模式有：简单工厂（Simple  Factory）、工厂方法模式（Factory Method）、创建者模式（Builder）、原型模式(Prototype)、单例模式(Singleton)。")]),t._v(" "),s("h2",{attrs:{id:"简单工厂"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂"}},[t._v("#")]),t._v(" 简单工厂")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("我的理解")]),t._v(" "),s("ul",[s("li",[t._v("工厂类 里面包含静态方法，根据参数的不同创建不同的对象，最终返回抽象类")]),t._v(" "),s("li",[t._v("抽象类")]),t._v(" "),s("li",[t._v("实体类继承上面的抽象类")]),t._v(" "),s("li",[t._v("客户端传递参数获取抽象类")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式定义")])]),t._v(" "),s("p",[t._v("简单工厂又称为静态工厂，它属于类创建型模式，可以根据不同的参数返回不同的实例")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式结构")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("Factor")]),t._v("y:工厂角色")]),t._v(" "),s("p",[t._v("实现创建所有实例的内部逻辑")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Product")]),t._v("：抽象产品角色")]),t._v(" "),s("p",[t._v("创建所有对象的父类")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("ConcreateProduct")]),t._v("：具体产品角色")]),t._v(" "),s("p",[t._v("创建的对象充当这个角色的某个具体类的实例")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式图")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("类图")]),t._v(" "),s("p",[s("img",{attrs:{src:_(1103),alt:""}})])]),t._v(" "),s("li",[s("p",[t._v("时序图")]),t._v(" "),s("p",[s("img",{attrs:{src:_(1104),alt:""}})])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式代码")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/fengchenzhihun1/design/tree/master/src/main/java/com/chenfeng/designtwo/creational_pattern/factory/simplefactory",target:"_blank",rel:"noopener noreferrer"}},[t._v("简单工厂github"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式分析")])]),t._v(" "),s("ul",[s("li",[t._v("对象的创建和对象的本身业务进行分离降低系统的耦合，使得两者修改起来比较容易")]),t._v(" "),s("li",[t._v("工厂方法属于静态方法使用起来比较简单")]),t._v(" "),s("li",[t._v("简单工厂的最大问题在于工厂类的职责过于重，增加新的产品需要修改共产类的业务逻辑")]),t._v(" "),s("li",[s("strong",[t._v("简单共产类的要点在于")]),t._v("：当你需要什么时，只需传递一个正确的参数就可以创建所需要的对象而无需知道创建细节，")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("优点")])]),t._v(" "),s("ul",[s("li",[t._v("共产类包含必要的判断逻辑，客户端免除创建对象的责任，只需要消费对象。实现了对职责的分割")]),t._v(" "),s("li",[t._v("客户端无需知道所创建的具体类名，只需要知道具体的参数，对于一些复杂的类名，通过简单工厂可以减少记忆量")]),t._v(" "),s("li",[t._v("可以通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加具体的产品类，在一定成都上增加了程序的灵活性")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("缺点")])]),t._v(" "),s("ul",[s("li",[t._v("工厂类集中了所有产品的创建逻辑，一旦不能正常工作，整个系统都要受到影响")]),t._v(" "),s("li",[t._v("会增加类的个数，在一定程度上增加了系统的复杂度和理解难度，不利于系统的扩展和维护")]),t._v(" "),s("li",[t._v("由于使用了静态共产方法，造成工厂角色无法形成基于继承的等级结构")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("适用场景")])]),t._v(" "),s("ul",[s("li",[t._v("工厂类创建对象较少")]),t._v(" "),s("li",[t._v("客户端只知道传入工厂类的参数，对于如何创建对象并不关心")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("总结")])]),t._v(" "),s("ul",[s("li",[t._v("创建型模式对类的实例化过程进行了抽象，能够将对象的创建与对象的使用过程分离。")]),t._v(" "),s("li",[t._v("简单工厂模式又称为静态工厂方法模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。")]),t._v(" "),s("li",[t._v("简单工厂模式包含三个角色：工厂角色负责实现创建所有实例的内部逻辑；抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口；具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例。")]),t._v(" "),s("li",[t._v("简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。")]),t._v(" "),s("li",[t._v("简单工厂模式最大的优点在于实现对象的创建和对象的使用分离，将对象的创建交给专门的工厂类负责，但是其最大的缺点在于工厂类不够灵活，增加新的具体产品需要修改工厂类的判断逻辑代码，而且产品较多时，工厂方法代码将会非常复杂。")]),t._v(" "),s("li",[t._v("简单工厂模式适用情况包括：工厂类负责创建的对象比较少；客户端只知道传入工厂类的参数，对于如何创建对象不关心。")])])])]),t._v(" "),s("h2",{attrs:{id:"工厂方法模式（factory-method-pattern）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工厂方法模式（factory-method-pattern）"}},[t._v("#")]),t._v(" 工厂方法模式（Factory Method Pattern）")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("我的理解")]),t._v(" "),s("ul",[s("li",[t._v("抽象工厂  返回抽象类")]),t._v(" "),s("li",[t._v("抽象类")]),t._v(" "),s("li",[t._v("具体类")]),t._v(" "),s("li",[t._v("具体工厂  工厂中返回具体对象")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式定义")])]),t._v(" "),s("p",[t._v("工厂方法模式又称为工厂模式，也叫虚拟构造器（Virtual Constructor）模式，或者多态工厂，它属于类创建型模式。该模式下，工厂父类负责定义创建产品对象的公共接口，而共产子类负责生成具体的产品对象，目的是将产品类的实例化操作延迟到工厂子类中完成，即通过子类来确定应该实例化哪一个具体产品类")])]),t._v(" "),s("li",[s("p",[t._v("模式结构")]),t._v(" "),s("ul",[s("li",[t._v("Product：抽象产品")]),t._v(" "),s("li",[t._v("ConcreteProduct：具体产品")]),t._v(" "),s("li",[t._v("Factory：抽象工厂")]),t._v(" "),s("li",[t._v("ConcreteFactory：具体工厂")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式图")])]),t._v(" "),s("p",[s("strong",[t._v("类图")])]),t._v(" "),s("p",[s("img",{attrs:{src:_(1105),alt:""}})]),t._v(" "),s("p",[s("strong",[t._v("时序图")])]),t._v(" "),s("p",[s("img",{attrs:{src:_(1106),alt:""}})])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式代码")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/fengchenzhihun1/design/tree/master/src/main/java/com/chenfeng/designtwo/creational_pattern/factory/factorymethod",target:"_blank",rel:"noopener noreferrer"}},[t._v("模式代码github"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式分析")])]),t._v(" "),s("p",[t._v("工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责哪一个产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("实例")])]),t._v(" "),s("p",[t._v("某系统日志记录器要求支持多种日志记录方式，如文件记录、数据库记录等，且用户可以根据要求动态选择日志记录方式， 现使用工厂方法模式设计该系统。")]),t._v(" "),s("p",[s("strong",[t._v("类图")])]),t._v(" "),s("p",[s("img",{attrs:{src:_(1107),alt:""}})]),t._v(" "),s("p",[s("strong",[t._v("时序图")])]),t._v(" "),s("p",[s("img",{attrs:{src:_(1108),alt:""}})])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("优点")])]),t._v(" "),s("ul",[s("li",[t._v("向客户隐藏了细节，用户只需关心对应的工厂而无需知道具体类名")]),t._v(" "),s("li",[t._v("多态是工厂方法的关键")]),t._v(" "),s("li",[t._v("加入新产品时无需修改抽象工厂和抽象产品，只需提供接口而无需修改客户端。系统的可扩展和维护性好")])])]),t._v(" "),s("li",[s("p",[t._v("缺点")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在添加新产品时，需要编写新的具体产品类，还要提供与之对应的具体工厂类。系统中的类的个数会成对增加，增加了系统的复杂性。")])]),t._v(" "),s("li",[s("p",[t._v("考虑到可扩展性，需要引入抽象层，在客户端代码中使用抽象定义，增加了系统的抽象性和理解难度，且在实现时节能需要用到DOM、反射等技术增加了系统的设计难度")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("使用环境")])]),t._v(" "),s("ul",[s("li",[t._v("一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体工厂类创建；客户端需要知道创建具体产品的工厂类。")]),t._v(" "),s("li",[t._v("一个类通过其子类来指定创建哪个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏代换原则，在程序运行时，子类对象将覆盖父类对象，从而使得系统更容易扩展。")]),t._v(" "),s("li",[t._v("将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式应用")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Connection")]),t._v(" conn"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DriverManager")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getConnection")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v('"jdbc'),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("microsoft"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("sqlserver"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("loc\nalhost"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1433")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DatabaseName")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("DB"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("sa"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("password"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v('"'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Statement")]),t._v(" statement"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("conn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStatement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ResultSet")]),t._v(" rs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("statement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("executeQuery")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"select * from UserInfo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式扩展")])]),t._v(" "),s("ul",[s("li",[t._v("使用多个工厂方法：在抽象工厂角色中可以定义多个工厂方法，从而使具体工厂角色实现这些不同的工厂方法，这些方法可以包含不同的业务逻辑，以满足对不同的产品对象的需求。")]),t._v(" "),s("li",[t._v("产品对象的重复使用：工厂对象将已经创建过的产品保存到一个集合（如数组、List等）中，然后根据客户对产品的请求，对集合进行查询。如果有满足要求的产品对象，就直接将该产品返回客户端；如果集合中没有这样的产品对象，那么就创建一个新的满足要求的产品对象，然后将这个对象在增加到集合中，再返回给客户端。")]),t._v(" "),s("li",[t._v("多态性的丧失和模式的退化：如果工厂仅仅返回一个具体产品对象，便违背了工厂方法的用意，发生退化，此时就不再是工厂方法模式了。一般来说，工厂对象应当有一个抽象的父类型，如果工厂等级结构中只有一个具体工厂类的话，抽象工厂就可以省略，也将发生了退化。当只有一个具体工厂，在具体工厂中可以创建所有的产品对象，并且工厂方法设计为静态方法时，工厂方法模式就退化成简单工厂模式。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("总结")])]),t._v(" "),s("ul",[s("li",[t._v("工厂方法模式又称为工厂模式，它属于类创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象，这样做的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。")]),t._v(" "),s("li",[t._v("工厂方法模式包含四个角色：抽象产品是定义产品的接口，是工厂方法模式所创建对象的超类型，即产品对象的共同父类或接口；具体产品实现了抽象产品接口，某种类型的具体产品由专门的具体工厂创建，它们之间往往一一对应；抽象工厂中声明了工厂方法，用于返回一个产品，它是工厂方法模式的核心，任何在模式中创建对象的工厂类都必须实现该接口；具体工厂是抽象工厂类的子类，实现了抽象工厂中定义的工厂方法，并可由客户调用，返回一个具体产品类的实例。")]),t._v(" "),s("li",[t._v("工厂方法模式是简单工厂模式的进一步抽象和推广。由于使用了面向对象的多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。在工厂方法模式中，核心的工厂类不再负责所有产品的创建，而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口，而不负责产品类被实例化这种细节，这使得工厂方法模式可以允许系统在不修改工厂角色的情况下引进新产品。")]),t._v(" "),s("li",[t._v("工厂方法模式的主要优点是增加新的产品类时无须修改现有系统，并封装了产品对象的创建细节，系统具有良好的灵活性和可扩展性；其缺点在于增加新产品的同时需要增加新的工厂，导致系统类的个数成对增加，在一定程度上增加了系统的复杂性。")]),t._v(" "),s("li",[t._v("工厂方法模式适用情况包括：一个类不知道它所需要的对象的类；一个类通过其子类来指定创建哪个对象；将创建对象的任务委托给多个工厂子类中的某一个，客户端在使用时可以无须关心是哪一个工厂子类创建产品子类，需要时再动态指定。")])])])]),t._v(" "),s("h2",{attrs:{id:"抽象工厂（-abstract-factory-pattern-）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂（-abstract-factory-pattern-）"}},[t._v("#")]),t._v(" 抽象工厂（ Abstract Factory Pattern ）")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("之前的工厂方法中只有生产一个，而此工厂生产多个对象")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式动机")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("在工厂方法模式中具体工厂负责生产具体的产品，每一个具体工厂对应一种具体产品，工厂方法也具有唯一性，一般情况下，一个具体工厂中只有一个工厂方法或者一组重载的工厂方法。但是有时候我们需要一个工厂可以提供多个产品对象，而不是单一的产品对象。")]),t._v(" "),s("blockquote",[s("p",[t._v("为了更清晰地理解工厂方法模式，需要先引入两个概念：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("产品等级结构")]),t._v(" ：产品等级结构即产品的继承结构，如一个抽象类是电视机，其子类有海尔电视机、海信电视机、TCL电视机，则抽象电视机与具体品牌的电视机之间构成了一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是其子类。")]),t._v(" "),s("li",[s("strong",[t._v("产品族")]),t._v(" ：在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品，如海尔电器工厂生产的海尔电视机、海尔电冰箱，海尔电视机位于电视机产品等级结构中，海尔电冰箱位于电冰箱产品等级结构中。")])])])]),t._v(" "),s("li",[s("p",[t._v("当系统所提供的工厂所需生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构中属于不同类型的具体产品时需要使用抽象工厂模式。")])]),t._v(" "),s("li",[s("p",[t._v("抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。")])]),t._v(" "),s("li",[s("p",[t._v("抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构，一个工厂等级结构可以负责多个不同产品等级结构中的产品对象的创建 。当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、有效率。")])])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式定义")])]),t._v(" "),s("p",[t._v("抽象工厂模式(Abstract Factory Pattern)：提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式结构")])]),t._v(" "),s("ul",[s("li",[t._v("AbstractFactory：抽象工厂")]),t._v(" "),s("li",[t._v("ConcreteFactory：具体工厂")]),t._v(" "),s("li",[t._v("AbstractProcuct：抽象产品")]),t._v(" "),s("li",[t._v("Product：具体产品")])])]),t._v(" "),s("li",[s("p",[t._v("模式图")]),t._v(" "),s("p",[s("strong",[t._v("类图")])]),t._v(" "),s("p",[s("img",{attrs:{src:_(1109),alt:""}})]),t._v(" "),s("p",[s("strong",[t._v("时序图")])]),t._v(" "),s("p",[s("img",{attrs:{src:_(1110),alt:""}})])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式代码")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/fengchenzhihun1/design/tree/master/src/main/java/com/chenfeng/designtwo/creational_pattern/factory/abstractfactory",target:"_blank",rel:"noopener noreferrer"}},[t._v("模式代码github"),s("OutboundLink")],1)])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("优点")])]),t._v(" "),s("ul",[s("li",[t._v("抽象工厂模式隔离了具体类的生成，使得客户并不需要知道什么被创建。由于这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变整个软件系统的行为。另外，应用抽象工厂模式可以实现高内聚低耦合的设计目的，因此抽象工厂模式得到了广泛的应用。")]),t._v(" "),s("li",[t._v("当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象。这对一些需要根据当前环境来决定其行为的软件系统来说，是一种非常实用的设计模式。")]),t._v(" "),s("li",[t._v("增加新的具体工厂和产品族很方便，无须修改已有系统，符合“开闭原则”。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("缺点")])]),t._v(" "),s("ul",[s("li",[t._v("在添加新的产品对象时，难以扩展抽象工厂来生产新种类的产品，这是因为在抽象工厂角色中规定了所有可能被创建的产品集合，要支持新种类的产品就意味着要对该接口进行扩展，而这将涉及到对抽象工厂角色及其所有子类的修改，显然会带来较大的不便。")]),t._v(" "),s("li",[t._v("开闭原则的倾斜性（增加新的工厂和产品族容易，增加新的产品等级结构麻烦）。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("使用环境")])]),t._v(" "),s("p",[t._v("在以下情况下可以使用抽象工厂模式：")]),t._v(" "),s("ul",[s("li",[t._v("一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。")]),t._v(" "),s("li",[t._v("系统中有多于一个的产品族，而每次只使用其中某一产品族。")]),t._v(" "),s("li",[t._v("属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。")]),t._v(" "),s("li",[t._v("系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("模式扩展")])]),t._v(" "),s("ul",[s("li",[s("ul",[s("li",[s("p",[t._v("“开闭原则”要求系统对扩展开放，对修改封闭，通过扩展达到增强其功能的目的。对于涉及到多个产品族与多个产品等级结构的系统，其功能增强包括两方面：")]),t._v(" "),s("p",[t._v("增加产品族：对于增加新的产品族，工厂方法模式很好的支持了“开闭原则”，对于新增加的产品族，只需要对应增加一个新的具体工厂即可，对已有代码无须做任何修改。增加新的产品等级结构：对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，不能很好地支持“开闭原则”。")])])])]),t._v(" "),s("li",[s("p",[t._v("抽象工厂模式的这种性质称为“开闭原则”的倾斜性，抽象工厂模式以一种倾斜的方式支持增加新的产品，它为新产品族的增加提供方便，但不能为新的产品等级结构的增加提供这样的方便。")])]),t._v(" "),s("li")])]),t._v(" "),s("li",[s("p",[t._v("工厂模式的退化")]),t._v(" "),s("p",[t._v("当抽象工厂模式中每一个具体工厂类只创建一个产品对象，也就是只存在一个产品等级结构时，抽象工厂模式退化成工厂方法模式；当工厂方法模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建产品对象，并将创建对象的工厂方法设计为静态方法时，工厂方法模式退化成简单工厂模式。")])]),t._v(" "),s("li",[s("p",[t._v("总结")]),t._v(" "),s("ul",[s("li",[t._v("抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。")]),t._v(" "),s("li",[t._v("抽象工厂模式包含四个角色：抽象工厂用于声明生成抽象产品的方法；具体工厂实现了抽象工厂声明的生成抽象产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中；抽象产品为每种产品声明接口，在抽象产品中定义了产品的抽象业务方法；具体产品定义具体工厂生产的具体产品对象，实现抽象产品接口中定义的业务方法。")]),t._v(" "),s("li",[t._v("抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式与工厂方法模式最大的区别在于，工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构。")]),t._v(" "),s("li",[t._v("抽象工厂模式的主要优点是隔离了具体类的生成，使得客户并不需要知道什么被创建，而且每次可以通过具体工厂类创建一个产品族中的多个对象，增加或者替换产品族比较方便，增加新的具体工厂和产品族很方便；主要缺点在于增加新的产品等级结构很复杂，需要修改抽象工厂和所有的具体工厂类，对“开闭原则”的支持呈现倾斜性。")]),t._v(" "),s("li",[t._v("抽象工厂模式适用情况包括：一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节；系统中有多于一个的产品族，而每次只使用其中某一产品族；属于同一个产品族的产品将在一起使用；系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。")])])])])])}),[],!1,null,null,null);v.default=a.exports}}]);