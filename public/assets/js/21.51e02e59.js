(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{1109:function(t,e,r){"use strict";r.r(e);var n=r(4),a=Object(n.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"前置相关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前置相关"}},[t._v("#")]),t._v(" 前置相关")]),t._v(" "),n("p",[n("strong",[n("a",{attrs:{href:"https://github.com/fengchenzhihun1/design.git",target:"_blank",rel:"noopener noreferrer"}},[t._v("我的设计模式github地址"),n("OutboundLink")],1)])]),t._v(" "),n("p",[n("strong",[n("a",{attrs:{href:"www.github.com/bjmashibing/DesignPatterns"}},[t._v("马老师设计模式github")])])]),t._v(" "),n("p",[n("strong",[n("a",{attrs:{href:"https://note.youdao.com/ynoteshare1/index.html?id=3cffc4f2f5185a0d83050a1d59b9ec93&type=notebook",target:"_blank",rel:"noopener noreferrer"}},[t._v("坦克大战笔记"),n("OutboundLink")],1)])]),t._v(" "),n("h2",{attrs:{id:"开闭原则（open-close-principle）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则（open-close-principle）"}},[t._v("#")]),t._v(" 开闭原则（Open Close Principle）")]),t._v(" "),n("p",[t._v("开闭原则的意思是："),n("strong",[t._v("对扩展开放，对修改关闭")]),t._v("。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。")]),t._v(" "),n("h2",{attrs:{id:"单一职责原则-single-responsibility"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#单一职责原则-single-responsibility"}},[t._v("#")]),t._v(" 单一职责原则(Single Responsibility)")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("定义")]),t._v(" "),n("p",[t._v("有且仅有一个原因引起类的变更")])]),t._v(" "),n("li",[n("p",[t._v("单一职责存在争议")])]),t._v(" "),n("li",[n("p",[t._v("对类职责的定义，什么是类的职责，一记怎么划分类的职责")]),t._v(" "),n("p",[n("strong",[t._v("注意")])]),t._v(" "),n("p",[t._v("对于接口设计的时候要做到单一，但是对于实现类就要多方面考虑了")])]),t._v(" "),n("li",[n("p",[t._v("单一职责的适用范围")]),t._v(" "),n("p",[t._v("类、接口、方法")]),t._v(" "),n("p",[n("strong",[t._v("总结")])]),t._v(" "),n("p",[t._v("接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化")])])]),t._v(" "),n("h2",{attrs:{id:"里氏替换原则-liskov-substitution-principle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#里氏替换原则-liskov-substitution-principle"}},[t._v("#")]),t._v(" 里氏替换原则("),n("strong",[t._v("Liskov Substitution Principle")]),t._v(")")]),t._v(" "),n("ol",[n("li",[t._v("继承的优缺点\n"),n("ul",[n("li",[t._v("优点、\n"),n("ul",[n("li",[t._v("代码共享")]),t._v(" "),n("li",[t._v("提高重用")]),t._v(" "),n("li",[t._v("子类可以形似父类又异于父类")]),t._v(" "),n("li",[t._v("提高代码的可扩展性")]),t._v(" "),n("li",[t._v("提高产品或者项目的开放性")])])]),t._v(" "),n("li",[t._v("缺点\n"),n("ul",[n("li",[t._v("继承是侵入性的")]),t._v(" "),n("li",[t._v("降低代码的灵活性")]),t._v(" "),n("li",[t._v("增强了耦合")])])])])]),t._v(" "),n("li",[t._v("定义有两种")])]),t._v(" "),n("ul",[n("li",[t._v("对每一个类型为S的的对象O1，都有类型为T的对象O2，程序P的行为没有发生变化，那么类型S是类型T的子类型")]),t._v(" "),n("li",[t._v("所有引用基类的地方必须透明地使用其子类对象")])]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("一个定义四层含义")])]),t._v(" "),n("ul",[n("li",[t._v("子类必须完全实现父类的方法\n"),n("ul",[n("li",[n("strong",[t._v("如果子类不能完整地实现父类的方法，或者父类的某些方法在子类中已经发生畸变，则建议断开父子继承关系，采用依赖、聚集、组合灯关系代替继承")])])])]),t._v(" "),n("li",[t._v("子类可以由自己的个性")]),t._v(" "),n("li",[t._v("覆盖或者实现父类的方法输入参数可以被放大\n"),n("ul",[n("li",[t._v("子类中方法的前置条件必须与超类中被覆写的方法前置条件相同或者更宽松")])])]),t._v(" "),n("li",[t._v("覆写或实现方法时输出结果可以被缩小")])]),t._v(" "),n("h2",{attrs:{id:"依赖倒转原则（dependence-inversion-principle）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖倒转原则（dependence-inversion-principle）"}},[t._v("#")]),t._v(" 依赖倒转原则（Dependence Inversion Principle）")]),t._v(" "),n("p",[t._v("这个原则是开闭原则的基础，具体内容：针对对接口编程，依赖于抽象而不依赖于具体。")]),t._v(" "),n("h2",{attrs:{id:"接口隔离原则（interface-segregation-principle）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口隔离原则（interface-segregation-principle）"}},[t._v("#")]),t._v(" 接口隔离原则（Interface Segregation Principle）")]),t._v(" "),n("p",[t._v("这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。")]),t._v(" "),n("h2",{attrs:{id:"迪米特法则，又称最少知道原则（demeter-principle）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#迪米特法则，又称最少知道原则（demeter-principle）"}},[t._v("#")]),t._v(" 迪米特法则，又称最少知道原则（Demeter Principle）")]),t._v(" "),n("p",[t._v("最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。")]),t._v(" "),n("h2",{attrs:{id:"合成复用原则（composite-reuse-principle）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#合成复用原则（composite-reuse-principle）"}},[t._v("#")]),t._v(" 合成复用原则（Composite Reuse Principle）")]),t._v(" "),n("p",[t._v("合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。")]),t._v(" "),n("h2",{attrs:{id:"设计模式的类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的类型"}},[t._v("#")]),t._v(" 设计模式的类型")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("序号")]),t._v(" "),n("th",[t._v("模式&描述")]),t._v(" "),n("th",[t._v("包括")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("1")]),t._v(" "),n("td",[t._v("创建型模式这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用新的运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。")]),t._v(" "),n("td",[t._v("工厂模式（FactoryPattern）抽象工厂模式（AbstractFactoryPattern）单例模式（SingletonPattern）建造者模式（BuilderPattern）原型模式（PrototypePattern）")])]),t._v(" "),n("tr",[n("td",[t._v("2")]),t._v(" "),n("td",[t._v("结构型模式这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。")]),t._v(" "),n("td",[t._v("适配器模式（AdapterPattern）桥接模式（BridgePattern）过滤器模式（Filter、CriteriaPattern）组合模式（CompositePattern）装饰器模式（DecoratorPattern）外观模式（FacadePattern）享元模式（FlyweightPattern）代理模式（ProxyPattern）")])]),t._v(" "),n("tr",[n("td",[t._v("3")]),t._v(" "),n("td",[t._v("行为型模式这些设计模式特别关注对象之间的通信。")]),t._v(" "),n("td",[t._v("责任链模式（ChainofResponsibilityPattern）命令模式（CommandPattern）解释器模式（InterpreterPattern）迭代器模式（IteratorPattern）中介者模式（MediatorPattern）备忘录模式（MementoPattern）观察者模式（ObserverPattern）状态模式（StatePattern）空对象模式（NullObjectPattern）策略模式（StrategyPattern）模板模式（TemplatePattern）访问者模式（VisitorPattern）")])]),t._v(" "),n("tr",[n("td",[t._v("4")]),t._v(" "),n("td",[t._v("J2EE模式这些设计模式特别关注表示层。这些模式是由SunJavaCenter鉴定的。")]),t._v(" "),n("td",[t._v("MVC模式（MVCPattern）业务代表模式（BusinessDelegatePattern）组合实体模式（CompositeEntityPattern）数据访问对象模式（DataAccessObjectPattern）前端控制器模式（FrontControllerPattern）拦截过滤器模式（InterceptingFilterPattern）服务定位器模式（ServiceLocatorPattern）传输对象模式（TransferObjectPattern）")])])])]),t._v(" "),n("h2",{attrs:{id:"图示设计模式关系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#图示设计模式关系"}},[t._v("#")]),t._v(" 图示设计模式关系")]),t._v(" "),n("p",[n("img",{attrs:{src:r(591),alt:""}})])])}),[],!1,null,null,null);e.default=a.exports},591:function(t,e,r){t.exports=r.p+"assets/img/designconnect.24681155.png"}}]);